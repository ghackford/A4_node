/**
 * @file Implements DAO managing data storage of dislikes
 */
import DislikeDaoI from "../interfaces/DislikeDaoI";
import DislikeModel from "../mongoose/dislikes/DislikeModel";
import Dislike from "../models/dislikes/Dislike";
/**
 * @class DislikeDao Implements Data Access Object managing data storage
 * of dislikes
 * @property {DislikeDao} dislikeDao Private single instance of DislikeDao
 */
export default class DislikeDao implements DislikeDaoI {
    private static dislikeDao: DislikeDao | null = null;
    /**
     * creates an instance of DislikeDao
     * @returns DislikeDao
     */
    public static getInstance = (): DislikeDao => {
        if(DislikeDao.dislikeDao === null) {
            DislikeDao.dislikeDao = new DislikeDao();
        }
        return DislikeDao.dislikeDao;
    }
    private constructor() {}
    /**
     * Function to find a list of all the users that have disliked a single tuit
     * @param {string} tid the ID of the tuit
     * @returns a list of Dislike objects associated with a specified tuit
     */
    findAllUsersThatDislikedTuit = async (tid: string): Promise<Dislike[]> =>
        DislikeModel
            .find({tuit: tid})
            .populate("dislikedBy")
            .exec();
    /**
     * Finds a list of tuits that have been disliked by a specified user
     * @param {string} uid the ID of the user
     * @returns a list of dislike objects generated by a specified user with the
     * tuit data populated
     */
    findAllTuitsDislikedByUser = async (uid: string): Promise<Dislike[]> =>
        DislikeModel
            .find({dislikedBy: uid})
            .populate({
                path: "tuit",
                populate: {
                    path: "postedBy"
                }
            })
            .exec();
    /**
     * Establishes a dislike link between a user and a tuit
     * @param {string} uid the ID of the user
     * @param {string} tid the ID of the tuit the user is disliking
     * @returns the dislike object that was created
     */
    userDislikesTuit = async (uid: string, tid: string): Promise<any> =>
        DislikeModel.create({tuit: tid, dislikedBy: uid});
    /**
     * Finds if a user has disliked a tuit
     * @param {string} uid the ID of the user
     * @param {string} tid  the ID of the tuit
     * @returns a dislike object that is between a specific user and a specific tuit
     */
    findUserDislikesTuit = async (uid: string, tid: string): Promise<any> =>
        DislikeModel.findOne({tuit: tid, dislikedBy: uid});
    /**
     * Removes the dislike connection between a user and a tuit
     * @param {string} uid the ID of the user
     * @param {string} tid the ID of the tuit the user is un-disliking
     * @returns Promise to be notified when dislike is removed
     */
    userUnDislikesTuit = async (uid: string, tid: string): Promise<any> =>
        DislikeModel.deleteOne({tuit: tid, dislikedBy: uid});
    /**
     * Finds the total number of dislikes for one tuit
     * @param {string} tid the ID of the tuit
     * @returns the number of dislikes associated with a tuit
     */
    countHowManyDislikedTuit = async (tid: string): Promise<any> =>
        DislikeModel.count({tuit: tid});
    /**
     * Directly deletes a dislike from the database
     * @param {string} did the ID of the dislike object
     * @returns Promise to be notified when deletion has succeeded
     */
    deleteDislike = async (did: string): Promise<any> =>
        DislikeModel.deleteOne({_id: did})
    /**
     * Finds a dislike object directly by ID from the database
     * @param {string} did the ID of the dislike
     * @returns a dislike object
     */
    findDislikeById = async (did: string): Promise<any> =>
        DislikeModel.findOne({_id: did});
}